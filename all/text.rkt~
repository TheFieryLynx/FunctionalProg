#lang scheme/base

(require scheme/string)

(define input_data "data.txt")

;N
(define N 4)

;таблица N-1 грамм c числом встреч начал в датасете
(define dict-cnt-hash-start (make-hash))

;таблица N-1 грамм c числом встреч концов в датасете
(define dict-cnt-hash-end (make-hash))

;таблицы с последующими словами и их количеством
(define dict-hash-words-start (make-hash))

(define r_word  #px"\\s*\\b\\s*")
(define r_sent  #px"\\.|\\?|!")
(define punс_marks (list "." "," ";" ":" "-" "?" "!"))

(define (parse_string str)
   (map (lambda (x)
           (reverse (cons "." (reverse (filter non-empty-string? (string-split x r_word)))))
        )
        (string-split (string-downcase str) r_sent)
   )
)

(define (text_in_dict filename)
    (let ((input (open-input-file filename)))
        (let loop ((line (read-line input)))
           (if (eof-object? line)
               (printf "\n\nEverything is ready\n\n")
               (let ((parsed (parse_string line)))
                   (map sentece-to-Ngrams parsed)
                   (loop (read-line input))
               )
           )
        )
    )
)

(define (sentece-to-Ngrams sent)
   (if (>= (length sent) N) ;если длина предложения не меньше N
       (begin
         (let LOOP-1 ((word-num 0) (res-lst '()))
           (if (< word-num (- (length sent) N))
               (let N-loop ((cnt 0)(n-gram '()))
               
                 (if (= cnt (sub1 N))
                     (if (= word-num 0)
                         (begin 
                           (add-to-dict-cnt-start (list n-gram))
                           (add-to-dict-hash-words-start (list n-gram) (list-ref sent (+ word-num cnt))) 
                           (LOOP-1 (add1 word-num) (append res-lst (list n-gram)))
                           )
                         (begin
                           (add-to-dict-hash-words-start (list n-gram) (list-ref sent (+ word-num cnt))) 
                           (LOOP-1 (add1 word-num) (append res-lst (list n-gram)))
                           )
                         )
                     (N-loop (add1 cnt)(append n-gram (list (list-ref sent (+ word-num cnt)))))
                     )
                 )
               res-lst
               )
         )
         (let LOOP-2 ((word-num (- (length sent) N)) (res-lst '()))
           (if (> word-num 0)
               (let N-loop ((cnt 0)(n-gram '()))
                 (if (= cnt (sub1 N))
                     (if (= word-num (- (length sent) N))
                         (begin 
                  
                           ;(add-to-dict-hash-words-start (list n-gram) (list-ref sent (+ word-num cnt))) 
                           (LOOP-2 (sub1 word-num) (append res-lst (list n-gram)))
                           )
                         (begin
                           ;(add-to-dict-hash-words-start (list n-gram) (list-ref sent (+ word-num cnt))) 
                           (LOOP-2 (sub1 word-num) (append res-lst (list n-gram)))
                           )
                     )
                     (N-loop (add1 cnt)(append n-gram (list (list-ref sent (+ word-num cnt)))))
                 )
                 )
               res-lst
               )
           )
       )
       '()
   )
)


(define (add-to-dict-cnt-start n-gram)
    (if (hash-has-key? dict-cnt-hash-start n-gram)
        (hash-set! dict-cnt-hash-start n-gram (add1 (hash-ref dict-cnt-hash-start n-gram)))
        (hash-set! dict-cnt-hash-start n-gram 1)
    )
)

; 1) "прямой" способ
(define (add-to-dict-hash-words-start n-gram word)
    (if (hash-has-key? dict-hash-words-start n-gram)
        (let ((words-hash (hash-ref dict-hash-words-start n-gram)))
             (if (hash-has-key? words-hash word)
                  (hash-set! words-hash word (add1 (hash-ref words-hash word)))
                  (hash-set! words-hash word 1)
             )
        )
        (hash-set! dict-hash-words-start n-gram (make-hash (list (cons word 1))))
    )
)

; 2) "обратный"


(text_in_dict input_data)
(print dict-hash-words-start)
