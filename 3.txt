#lang scheme/base

;------------------------------------------------1

#lang scheme/base

(define (list-fib-squares-a n)
  (let loop ((fib0 0) (fib1 1) (i 1) (result '()))
    (if(and (<= i n)(integer? n)) 
       (loop fib1 (+ fib0 fib1) (+ i 1) (cons fib1 result))
       (map (lambda (x) (* x x)) (reverse result))
    )
  )
)

(define (list-fib-squares-b n)
  (let loop ((fib0 0) (fib1 1) (i 1) (result '()))
    (if(and (<= i n)(integer? n)) 
       (loop fib1 (+ fib0 fib1) (+ i 1) (cons fib1 result))
       (foldl (lambda (x y) (cons (* x x) y)) '() result)
    )
  )
)




;------------------------------------------------2
(define (process lst)
  (let ((first-elem (foldl * 1 (car lst))))
   (filter (lambda (x) (> (foldl + 0 x) first-elem)) lst)
  )
)