-------------------------<1>-------------------------

#lang racket

(define (taskI lst)
  (if (empty? lst)
      '()
      (car
       (foldl (lambda(x y)
                (let ( (index (cadr y)) (min (caddr y))     ) 
                  (cond ((= x min) (list (cons index (car y)) (+ index 1) min))
                        ((< x min) (list (list index) (+ index 1) x))   
                        (else (list (car y) (+ index 1) min))
                        )
                  )
               ) (list '() 0 (car lst)) lst  
         )
       )
  )
)
;(result_list index current_min_element)

(taskI (list -1 0 1 -1 0 1 -1))
(taskI (list 8 7 6 5 4 3 2 1))
(taskI (list 1 2 1 1 4 5 6 7))
(taskI '())

-------------------------<2>-------------------------

#lang racket

;площадь каждого квадрата изначально - S/4; при делении этих квадратов еще на 4
;площадь каждого уменьшается еще на 4
;если 0 - ничего, 1 - суммируем, вектор - углубляемся

(define (taskII t s)
  (cond ((and (vector? t) (= (vector-length t) 1) (= (vector-ref t 0) 0)) 0)
        ((and (vector? t) (= (vector-length t) 1) (= (vector-ref t 0) 1)) s)
        ((equal? 1 t) s)
        ((equal? 0 t) 0)
        (else (+ (taskII (vector-ref t 0) (/ s 4)) (taskII (vector-ref t 1) (/ s 4))
              (taskII (vector-ref t 2) (/ s 4)) (taskII (vector-ref t 3) (/ s 4))))
  )
)

(taskII #(1 0 0 #(1 1 1 0)) 16) ; => 7
(taskII #(0 #(1 0 1 0) #(1 #(1 0 1 0) 0 1) 0) 64) ; => 18
(taskII #(1) 44) ; => 44

-------------------------<3>-------------------------

#lang racket

(define (taskIII lst)

   (define (my-length lst)
    (if (null? lst)
        0
        (+ 1 (my-length (cdr lst)))
    )
  )
  
  (define (max-list lst)
    (foldl (lambda(x y) (if (> (my-length x) y)
                            (my-length x)
                            y
                        )) (my-length (car lst)) lst
            ) 
  )
  (let ((mx (max-list lst)))
    (map (lambda(x) (if (= (my-length x) mx)
                             (map (lambda (y) (+ y 1)) x)
                             x

                          )) lst)
  )
)



(taskIII '((1 2 3 4) (2 3) (4 5) (6 4 5 6)))
(taskIII '((1) (2 3) (4 5) (6))) 

-------------------------<4>-------------------------

#lang racket

(define (taskIV-сс t s cc)
  (cond ((and (vector? t) (= (vector-length t) 1) (= (vector-ref t 0) 0)) (cc 0))
        ((and (vector? t) (= (vector-length t) 1) (= (vector-ref t 0) 1)) (cc s))
        ((equal? 1 t) (cc s))
        ((equal? 0 t) (cc 0))
        (else (taskIV-сс (vector-ref t 0)(/ s 4) (lambda(x)(taskIV-сс (vector-ref t 1) (/ s 4) (lambda(y)
              (taskIV-сс (vector-ref t 2) (/ s 4) (lambda(z) (taskIV-сс (vector-ref t 3) (/ s 4) (lambda(w)(cc (+ x y z w)))))))))))
  )
)

(taskIV-сс #(1 0 0 #(1 1 1 0)) 16 (lambda (x) x)) ; => 7
(taskIV-сс #(0 #(1 0 1 0) #(1 #(1 0 1 0) 0 1) 0) 64 (lambda (x) x)); => 18
(taskIV-сс #(1) 44 (lambda (x) x)) ; => 44
(taskIV-сс #(0) 44 (lambda (x) x)) ; => 0

-------------------------<5>-------------------------

#lang racket

(define (taskV . args)
    (foldl (lambda(x y)(lambda(z)(x (y z)))) (car args) (cdr args))  
)


((taskV add1) 5)
((taskV add1 add1 add1 sub1) 5)  

