#lang racket

(define (rot-right! v)
  (let loop ((i (- (vector-length v) 1))(last (vector-ref v (- (vector-length v) 1))))
    (if (= i 0)
        (begin
          (vector-set! v i last)
          v
        )
        (begin
          (vector-set! v i (vector-ref v (- i 1)))
          (loop (- i 1) last)
        )
    )
  )
)

(define v (vector 1 2 3 4 5 6 7 8 9))
(rot-right! v)

(define-syntax macro-rot-right!
  (syntax-rules()
    ((_ v)
     (let loop ((i (- (vector-length v) 1))(last (vector-ref v (- (vector-length v) 1))))
       (if (= i 0)
           (begin
             (vector-set! v i last)
             v
           )
           (begin
             (vector-set! v i (vector-ref v (- i 1)))
             (loop (- i 1) last)
           )
       )
     )
    )
  )
)

(macro-rot-right! v) 

Так как можно реализовать функцию, то необходимости в макросе нет
